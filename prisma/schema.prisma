generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    decks         Deck[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Deck {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    cards       Card[]
    likeCount   Int      @default(0)

    @@index([userId])
}

model Card {
    id           String        @id @default(cuid())
    content      String?
    type         CardType
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deckId       String
    deck         Deck          @relation(fields: [deckId], references: [id], onDelete: Cascade)
    cardProgress CardProgress?

    @@index([deckId])
}

model CardProgress {
    id                          String   @id @default(cuid())
    difficulty                  Int      @default(5) // 1-10
    importance                  Int      @default(5) // 1-10
    totalRevisions              Int      @default(0)
    totalCorrectRevisions       Int      @default(0)
    totalIncorrectRevisions     Int      @default(0)
    consecutiveCorrectRevisions Int      @default(0)
    lastRevised                 DateTime @default(now())
    cardId                      String   @unique
    card                        Card     @relation(fields: [cardId], references: [id])
    score                       Float    @default(200)

    @@index([cardId])
}

enum CardType {
    TEXT
    CODE
    IMAGE
    OPTION
}
