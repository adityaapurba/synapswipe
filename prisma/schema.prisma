generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model User {
    id             String         @id @default(cuid())
    name           String?
    email          String         @unique
    emailVerified  DateTime?
    image          String?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    decks          Deck[]
    cardProgresses CardProgress[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Deck {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    cards       Card[]
}

model Card {
    id             String         @id @default(cuid())
    content        String?
    type           CardType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    deckId         String
    deck           Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)
    cardProgresses CardProgress[]
}

model CardProgress {
    id                 String   @id @default(cuid())
    lastReviewed       DateTime @default(now())
    nextReview         DateTime
    interval           Int      @default(1)
    easeFactor         Float    @default(2.5)
    consecutiveCorrect Int      @default(0)
    errorCount         Int      @default(0)
    userId             String
    user               User     @relation(fields: [userId], references: [id])
    cardId             String
    card               Card     @relation(fields: [cardId], references: [id])

    @@unique([userId, cardId])
}

enum CardType {
    TEXT
    CODE
    IMAGE
    OPTION
}
